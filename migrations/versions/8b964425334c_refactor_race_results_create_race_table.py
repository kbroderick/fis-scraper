"""refactor_race_results_create_race_table

Revision ID: 8b964425334c
Revises: 9f7ea09a6e56
Create Date: 2025-06-30 11:45:19.916443

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8b964425334c'
down_revision: Union[str, None] = '9f7ea09a6e56'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('races',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fis_db_id', sa.Integer(), nullable=True),
    sa.Column('race_codex', sa.String(), nullable=True),
    sa.Column('race_date', sa.Date(), nullable=False),
    sa.Column('discipline', postgresql.ENUM('SL', 'GS', 'SG', 'DH', 'AC', name='discipline', create_type=False), nullable=False),
    sa.Column('race_name', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('win_time', sa.Float(), nullable=True),
    sa.Column('penalty', sa.Float(), nullable=True),
    sa.Column('race_category', sa.String(), nullable=True),
    sa.Column('total_starters', sa.Integer(), nullable=True),
    sa.Column('total_finishers', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Add race_id column as nullable first
    op.add_column('race_results', sa.Column('race_id', sa.Integer(), nullable=True))
    
    # Migrate data: Create Race records from existing RaceResult data
    connection = op.get_bind()
    
    # Get distinct race combinations from existing race_results
    distinct_races = connection.execute(sa.text("""
        SELECT DISTINCT 
            fis_db_id, race_codex, race_date, discipline, race_name, location, 
            win_time, penalty, race_category, total_starters, total_finishers
        FROM race_results 
        WHERE fis_db_id IS NOT NULL
    """)).fetchall()
    
    # Create Race records and update race_results with race_id
    for race_data in distinct_races:
        # Insert race record
        result = connection.execute(sa.text("""
            INSERT INTO races (fis_db_id, race_codex, race_date, discipline, race_name, location, 
                              win_time, penalty, race_category, total_starters, total_finishers)
            VALUES (:fis_db_id, :race_codex, :race_date, :discipline, :race_name, :location,
                    :win_time, :penalty, :race_category, :total_starters, :total_finishers)
            RETURNING id
        """), {
            'fis_db_id': race_data[0],
            'race_codex': race_data[1],
            'race_date': race_data[2],
            'discipline': race_data[3],
            'race_name': race_data[4],
            'location': race_data[5],
            'win_time': race_data[6],
            'penalty': race_data[7],
            'race_category': race_data[8],
            'total_starters': race_data[9],
            'total_finishers': race_data[10]
        })
        race_id = result.fetchone()[0]
        
        # Update all race_results for this race
        connection.execute(sa.text("""
            UPDATE race_results 
            SET race_id = :race_id 
            WHERE fis_db_id = :fis_db_id 
            AND race_date = :race_date 
            AND discipline = :discipline
        """), {
            'race_id': race_id,
            'fis_db_id': race_data[0],
            'race_date': race_data[2],
            'discipline': race_data[3]
        })
    
    # Make race_id non-nullable
    op.alter_column('race_results', 'race_id', nullable=False)
    
    # Create foreign key constraint
    op.create_foreign_key(None, 'race_results', 'races', ['race_id'], ['id'])
    
    # Remove old columns
    op.drop_column('race_results', 'discipline')
    op.drop_column('race_results', 'total_finishers')
    op.drop_column('race_results', 'race_date')
    op.drop_column('race_results', 'race_codex')
    op.drop_column('race_results', 'race_name')
    op.drop_column('race_results', 'location')
    op.drop_column('race_results', 'penalty')
    op.drop_column('race_results', 'win_time')
    op.drop_column('race_results', 'total_starters')
    op.drop_column('race_results', 'fis_db_id')
    op.drop_column('race_results', 'race_category')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add back the old columns
    op.add_column('race_results', sa.Column('race_category', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('fis_db_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('total_starters', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('win_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('penalty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('race_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('race_codex', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('race_date', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('race_results', sa.Column('total_finishers', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('race_results', sa.Column('discipline', postgresql.ENUM('SL', 'GS', 'SG', 'DH', 'AC', name='discipline'), autoincrement=False, nullable=False))
    
    # Migrate data back from races table
    connection = op.get_bind()
    connection.execute(sa.text("""
        UPDATE race_results 
        SET 
            fis_db_id = races.fis_db_id,
            race_codex = races.race_codex,
            race_date = races.race_date,
            discipline = races.discipline,
            race_name = races.race_name,
            location = races.location,
            win_time = races.win_time,
            penalty = races.penalty,
            race_category = races.race_category,
            total_starters = races.total_starters,
            total_finishers = races.total_finishers
        FROM races 
        WHERE race_results.race_id = races.id
    """))
    
    # Drop foreign key and race_id column
    op.drop_constraint(None, 'race_results', type_='foreignkey')
    op.drop_column('race_results', 'race_id')
    
    # Drop races table
    op.drop_table('races')
    # ### end Alembic commands ###
